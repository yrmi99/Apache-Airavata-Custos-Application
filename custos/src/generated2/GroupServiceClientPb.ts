/**
 * @fileoverview gRPC-Web generated client stub for user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: group.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as group_pb from './group_pb';


export class GroupManagementServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateGroup = new grpcWeb.MethodDescriptor(
    '/user.GroupManagementService/CreateGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.CreateGroupRequest,
    group_pb.GroupResponse,
    (request: group_pb.CreateGroupRequest) => {
      return request.serializeBinary();
    },
    group_pb.GroupResponse.deserializeBinary
  );

  createGroup(
    request: group_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.GroupResponse>;

  createGroup(
    request: group_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.GroupResponse) => void): grpcWeb.ClientReadableStream<group_pb.GroupResponse>;

  createGroup(
    request: group_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.GroupResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.GroupManagementService/CreateGroup',
        request,
        metadata || {},
        this.methodDescriptorCreateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.GroupManagementService/CreateGroup',
    request,
    metadata || {},
    this.methodDescriptorCreateGroup);
  }

  methodDescriptorUpdateGroup = new grpcWeb.MethodDescriptor(
    '/user.GroupManagementService/UpdateGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.UpdateGroupRequest,
    group_pb.GroupResponse,
    (request: group_pb.UpdateGroupRequest) => {
      return request.serializeBinary();
    },
    group_pb.GroupResponse.deserializeBinary
  );

  updateGroup(
    request: group_pb.UpdateGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.GroupResponse>;

  updateGroup(
    request: group_pb.UpdateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.GroupResponse) => void): grpcWeb.ClientReadableStream<group_pb.GroupResponse>;

  updateGroup(
    request: group_pb.UpdateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.GroupResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.GroupManagementService/UpdateGroup',
        request,
        metadata || {},
        this.methodDescriptorUpdateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.GroupManagementService/UpdateGroup',
    request,
    metadata || {},
    this.methodDescriptorUpdateGroup);
  }

  methodDescriptorDeleteGroup = new grpcWeb.MethodDescriptor(
    '/user.GroupManagementService/DeleteGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.DeleteGroupRequest,
    group_pb.DeleteGroupResponse,
    (request: group_pb.DeleteGroupRequest) => {
      return request.serializeBinary();
    },
    group_pb.DeleteGroupResponse.deserializeBinary
  );

  deleteGroup(
    request: group_pb.DeleteGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.DeleteGroupResponse>;

  deleteGroup(
    request: group_pb.DeleteGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.DeleteGroupResponse) => void): grpcWeb.ClientReadableStream<group_pb.DeleteGroupResponse>;

  deleteGroup(
    request: group_pb.DeleteGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.DeleteGroupResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.GroupManagementService/DeleteGroup',
        request,
        metadata || {},
        this.methodDescriptorDeleteGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.GroupManagementService/DeleteGroup',
    request,
    metadata || {},
    this.methodDescriptorDeleteGroup);
  }

  methodDescriptorGetGroup = new grpcWeb.MethodDescriptor(
    '/user.GroupManagementService/GetGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.GetGroupRequest,
    group_pb.GroupResponse,
    (request: group_pb.GetGroupRequest) => {
      return request.serializeBinary();
    },
    group_pb.GroupResponse.deserializeBinary
  );

  getGroup(
    request: group_pb.GetGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.GroupResponse>;

  getGroup(
    request: group_pb.GetGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.GroupResponse) => void): grpcWeb.ClientReadableStream<group_pb.GroupResponse>;

  getGroup(
    request: group_pb.GetGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.GroupResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.GroupManagementService/GetGroup',
        request,
        metadata || {},
        this.methodDescriptorGetGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.GroupManagementService/GetGroup',
    request,
    metadata || {},
    this.methodDescriptorGetGroup);
  }

  methodDescriptorListGroups = new grpcWeb.MethodDescriptor(
    '/user.GroupManagementService/ListGroups',
    grpcWeb.MethodType.UNARY,
    group_pb.Empty,
    group_pb.ListGroupsResponse,
    (request: group_pb.Empty) => {
      return request.serializeBinary();
    },
    group_pb.ListGroupsResponse.deserializeBinary
  );

  listGroups(
    request: group_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.ListGroupsResponse>;

  listGroups(
    request: group_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.ListGroupsResponse) => void): grpcWeb.ClientReadableStream<group_pb.ListGroupsResponse>;

  listGroups(
    request: group_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.ListGroupsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.GroupManagementService/ListGroups',
        request,
        metadata || {},
        this.methodDescriptorListGroups,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.GroupManagementService/ListGroups',
    request,
    metadata || {},
    this.methodDescriptorListGroups);
  }

}

